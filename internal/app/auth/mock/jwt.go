// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/auth/jwt.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/auth/jwt.go -destination=internal/app/auth/mock/jwt.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	auth "github.com/ozontech/seq-ui/internal/app/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTProvider is a mock of JWTProvider interface.
type MockJWTProvider struct {
	ctrl     *gomock.Controller
	recorder *MockJWTProviderMockRecorder
	isgomock struct{}
}

// MockJWTProviderMockRecorder is the mock recorder for MockJWTProvider.
type MockJWTProviderMockRecorder struct {
	mock *MockJWTProvider
}

// NewMockJWTProvider creates a new mock instance.
func NewMockJWTProvider(ctrl *gomock.Controller) *MockJWTProvider {
	mock := &MockJWTProvider{ctrl: ctrl}
	mock.recorder = &MockJWTProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTProvider) EXPECT() *MockJWTProviderMockRecorder {
	return m.recorder
}

// IssueToken mocks base method.
func (m *MockJWTProvider) IssueToken(name string, exp int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueToken", name, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueToken indicates an expected call of IssueToken.
func (mr *MockJWTProviderMockRecorder) IssueToken(name, exp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueToken", reflect.TypeOf((*MockJWTProvider)(nil).IssueToken), name, exp)
}

// Verify mocks base method.
func (m *MockJWTProvider) Verify(token string) (*auth.JWTClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", token)
	ret0, _ := ret[0].(*auth.JWTClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockJWTProviderMockRecorder) Verify(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockJWTProvider)(nil).Verify), token)
}
