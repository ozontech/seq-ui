// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/auth/oidc.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/auth/oidc.go -destination=internal/app/auth/mock/oidc.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	auth "github.com/ozontech/seq-ui/internal/app/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockOIDCProvider is a mock of OIDCProvider interface.
type MockOIDCProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCProviderMockRecorder
	isgomock struct{}
}

// MockOIDCProviderMockRecorder is the mock recorder for MockOIDCProvider.
type MockOIDCProviderMockRecorder struct {
	mock *MockOIDCProvider
}

// NewMockOIDCProvider creates a new mock instance.
func NewMockOIDCProvider(ctrl *gomock.Controller) *MockOIDCProvider {
	mock := &MockOIDCProvider{ctrl: ctrl}
	mock.recorder = &MockOIDCProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCProvider) EXPECT() *MockOIDCProviderMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockOIDCProvider) Verify(ctx context.Context, token string) (auth.OIDCToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, token)
	ret0, _ := ret[0].(auth.OIDCToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockOIDCProviderMockRecorder) Verify(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockOIDCProvider)(nil).Verify), ctx, token)
}
