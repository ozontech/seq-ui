// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/client/seqdb/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/client/seqdb/client.go -destination=internal/pkg/client/seqdb/mock/client.go
//

// Package mock_seqdb is a generated GoMock package.
package mock_seqdb

import (
	context "context"
	reflect "reflect"

	httputil "github.com/ozontech/seq-ui/internal/api/httputil"
	mask "github.com/ozontech/seq-ui/internal/pkg/mask"
	seqapi "github.com/ozontech/seq-ui/pkg/seqapi/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CancelAsyncSearch mocks base method.
func (m *MockClient) CancelAsyncSearch(arg0 context.Context, arg1 *seqapi.CancelAsyncSearchRequest) (*seqapi.CancelAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.CancelAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAsyncSearch indicates an expected call of CancelAsyncSearch.
func (mr *MockClientMockRecorder) CancelAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAsyncSearch", reflect.TypeOf((*MockClient)(nil).CancelAsyncSearch), arg0, arg1)
}

// DeleteAsyncSearch mocks base method.
func (m *MockClient) DeleteAsyncSearch(arg0 context.Context, arg1 *seqapi.DeleteAsyncSearchRequest) (*seqapi.DeleteAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.DeleteAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsyncSearch indicates an expected call of DeleteAsyncSearch.
func (mr *MockClientMockRecorder) DeleteAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsyncSearch", reflect.TypeOf((*MockClient)(nil).DeleteAsyncSearch), arg0, arg1)
}

// Export mocks base method.
func (m *MockClient) Export(arg0 context.Context, arg1 *seqapi.ExportRequest, arg2 *httputil.ChunkedWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Export indicates an expected call of Export.
func (mr *MockClientMockRecorder) Export(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockClient)(nil).Export), arg0, arg1, arg2)
}

// FetchAsyncSearchResult mocks base method.
func (m *MockClient) FetchAsyncSearchResult(arg0 context.Context, arg1 *seqapi.FetchAsyncSearchResultRequest) (*seqapi.FetchAsyncSearchResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAsyncSearchResult", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.FetchAsyncSearchResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAsyncSearchResult indicates an expected call of FetchAsyncSearchResult.
func (mr *MockClientMockRecorder) FetchAsyncSearchResult(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAsyncSearchResult", reflect.TypeOf((*MockClient)(nil).FetchAsyncSearchResult), arg0, arg1)
}

// GetAggregation mocks base method.
func (m *MockClient) GetAggregation(arg0 context.Context, arg1 *seqapi.GetAggregationRequest) (*seqapi.GetAggregationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregation", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.GetAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregation indicates an expected call of GetAggregation.
func (mr *MockClientMockRecorder) GetAggregation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregation", reflect.TypeOf((*MockClient)(nil).GetAggregation), arg0, arg1)
}

// GetAsyncSearchesList mocks base method.
func (m *MockClient) GetAsyncSearchesList(arg0 context.Context, arg1 *seqapi.GetAsyncSearchesListRequest, arg2 []string) (*seqapi.GetAsyncSearchesListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncSearchesList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*seqapi.GetAsyncSearchesListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncSearchesList indicates an expected call of GetAsyncSearchesList.
func (mr *MockClientMockRecorder) GetAsyncSearchesList(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncSearchesList", reflect.TypeOf((*MockClient)(nil).GetAsyncSearchesList), arg0, arg1, arg2)
}

// GetEvent mocks base method.
func (m *MockClient) GetEvent(arg0 context.Context, arg1 *seqapi.GetEventRequest) (*seqapi.GetEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.GetEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockClientMockRecorder) GetEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockClient)(nil).GetEvent), arg0, arg1)
}

// GetFields mocks base method.
func (m *MockClient) GetFields(arg0 context.Context, arg1 *seqapi.GetFieldsRequest) (*seqapi.GetFieldsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFields", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.GetFieldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFields indicates an expected call of GetFields.
func (mr *MockClientMockRecorder) GetFields(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFields", reflect.TypeOf((*MockClient)(nil).GetFields), arg0, arg1)
}

// GetHistogram mocks base method.
func (m *MockClient) GetHistogram(arg0 context.Context, arg1 *seqapi.GetHistogramRequest) (*seqapi.GetHistogramResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistogram", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.GetHistogramResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistogram indicates an expected call of GetHistogram.
func (mr *MockClientMockRecorder) GetHistogram(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistogram", reflect.TypeOf((*MockClient)(nil).GetHistogram), arg0, arg1)
}

// Search mocks base method.
func (m *MockClient) Search(arg0 context.Context, arg1 *seqapi.SearchRequest) (*seqapi.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockClientMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClient)(nil).Search), arg0, arg1)
}

// StartAsyncSearch mocks base method.
func (m *MockClient) StartAsyncSearch(arg0 context.Context, arg1 *seqapi.StartAsyncSearchRequest) (*seqapi.StartAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.StartAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAsyncSearch indicates an expected call of StartAsyncSearch.
func (mr *MockClientMockRecorder) StartAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAsyncSearch", reflect.TypeOf((*MockClient)(nil).StartAsyncSearch), arg0, arg1)
}

// Status mocks base method.
func (m *MockClient) Status(arg0 context.Context, arg1 *seqapi.StatusRequest) (*seqapi.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*seqapi.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockClientMockRecorder) Status(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClient)(nil).Status), arg0, arg1)
}

// WithMasking mocks base method.
func (m_2 *MockClient) WithMasking(m *mask.Masker) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "WithMasking", m)
}

// WithMasking indicates an expected call of WithMasking.
func (mr *MockClientMockRecorder) WithMasking(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMasking", reflect.TypeOf((*MockClient)(nil).WithMasking), m)
}
