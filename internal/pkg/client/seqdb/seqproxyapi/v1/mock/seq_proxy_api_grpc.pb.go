// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/client/seqdb/seqproxyapi/v1/seq_proxy_api_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/client/seqdb/seqproxyapi/v1/seq_proxy_api_grpc.pb.go -destination=internal/pkg/client/seqdb/seqproxyapi/v1/mock/seq_proxy_api_grpc.pb.go
//

// Package mock_seqproxyapi is a generated GoMock package.
package mock_seqproxyapi

import (
	context "context"
	reflect "reflect"

	seqproxyapi "github.com/ozontech/seq-ui/internal/pkg/client/seqdb/seqproxyapi/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockSeqProxyApiClient is a mock of SeqProxyApiClient interface.
type MockSeqProxyApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockSeqProxyApiClientMockRecorder
	isgomock struct{}
}

// MockSeqProxyApiClientMockRecorder is the mock recorder for MockSeqProxyApiClient.
type MockSeqProxyApiClientMockRecorder struct {
	mock *MockSeqProxyApiClient
}

// NewMockSeqProxyApiClient creates a new mock instance.
func NewMockSeqProxyApiClient(ctrl *gomock.Controller) *MockSeqProxyApiClient {
	mock := &MockSeqProxyApiClient{ctrl: ctrl}
	mock.recorder = &MockSeqProxyApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeqProxyApiClient) EXPECT() *MockSeqProxyApiClientMockRecorder {
	return m.recorder
}

// CancelAsyncSearch mocks base method.
func (m *MockSeqProxyApiClient) CancelAsyncSearch(ctx context.Context, in *seqproxyapi.CancelAsyncSearchRequest, opts ...grpc.CallOption) (*seqproxyapi.CancelAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelAsyncSearch", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.CancelAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAsyncSearch indicates an expected call of CancelAsyncSearch.
func (mr *MockSeqProxyApiClientMockRecorder) CancelAsyncSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAsyncSearch", reflect.TypeOf((*MockSeqProxyApiClient)(nil).CancelAsyncSearch), varargs...)
}

// ComplexSearch mocks base method.
func (m *MockSeqProxyApiClient) ComplexSearch(ctx context.Context, in *seqproxyapi.ComplexSearchRequest, opts ...grpc.CallOption) (*seqproxyapi.ComplexSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ComplexSearch", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.ComplexSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComplexSearch indicates an expected call of ComplexSearch.
func (mr *MockSeqProxyApiClientMockRecorder) ComplexSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplexSearch", reflect.TypeOf((*MockSeqProxyApiClient)(nil).ComplexSearch), varargs...)
}

// DeleteAsyncSearch mocks base method.
func (m *MockSeqProxyApiClient) DeleteAsyncSearch(ctx context.Context, in *seqproxyapi.DeleteAsyncSearchRequest, opts ...grpc.CallOption) (*seqproxyapi.DeleteAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAsyncSearch", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.DeleteAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsyncSearch indicates an expected call of DeleteAsyncSearch.
func (mr *MockSeqProxyApiClientMockRecorder) DeleteAsyncSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsyncSearch", reflect.TypeOf((*MockSeqProxyApiClient)(nil).DeleteAsyncSearch), varargs...)
}

// Export mocks base method.
func (m *MockSeqProxyApiClient) Export(ctx context.Context, in *seqproxyapi.ExportRequest, opts ...grpc.CallOption) (seqproxyapi.SeqProxyApi_ExportClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Export", varargs...)
	ret0, _ := ret[0].(seqproxyapi.SeqProxyApi_ExportClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockSeqProxyApiClientMockRecorder) Export(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockSeqProxyApiClient)(nil).Export), varargs...)
}

// Fetch mocks base method.
func (m *MockSeqProxyApiClient) Fetch(ctx context.Context, in *seqproxyapi.FetchRequest, opts ...grpc.CallOption) (seqproxyapi.SeqProxyApi_FetchClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(seqproxyapi.SeqProxyApi_FetchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockSeqProxyApiClientMockRecorder) Fetch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSeqProxyApiClient)(nil).Fetch), varargs...)
}

// FetchAsyncSearchResult mocks base method.
func (m *MockSeqProxyApiClient) FetchAsyncSearchResult(ctx context.Context, in *seqproxyapi.FetchAsyncSearchResultRequest, opts ...grpc.CallOption) (*seqproxyapi.FetchAsyncSearchResultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAsyncSearchResult", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.FetchAsyncSearchResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAsyncSearchResult indicates an expected call of FetchAsyncSearchResult.
func (mr *MockSeqProxyApiClientMockRecorder) FetchAsyncSearchResult(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAsyncSearchResult", reflect.TypeOf((*MockSeqProxyApiClient)(nil).FetchAsyncSearchResult), varargs...)
}

// GetAggregation mocks base method.
func (m *MockSeqProxyApiClient) GetAggregation(ctx context.Context, in *seqproxyapi.GetAggregationRequest, opts ...grpc.CallOption) (*seqproxyapi.GetAggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregation", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.GetAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregation indicates an expected call of GetAggregation.
func (mr *MockSeqProxyApiClientMockRecorder) GetAggregation(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregation", reflect.TypeOf((*MockSeqProxyApiClient)(nil).GetAggregation), varargs...)
}

// GetAsyncSearchesList mocks base method.
func (m *MockSeqProxyApiClient) GetAsyncSearchesList(ctx context.Context, in *seqproxyapi.GetAsyncSearchesListRequest, opts ...grpc.CallOption) (*seqproxyapi.GetAsyncSearchesListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAsyncSearchesList", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.GetAsyncSearchesListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncSearchesList indicates an expected call of GetAsyncSearchesList.
func (mr *MockSeqProxyApiClientMockRecorder) GetAsyncSearchesList(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncSearchesList", reflect.TypeOf((*MockSeqProxyApiClient)(nil).GetAsyncSearchesList), varargs...)
}

// GetHistogram mocks base method.
func (m *MockSeqProxyApiClient) GetHistogram(ctx context.Context, in *seqproxyapi.GetHistogramRequest, opts ...grpc.CallOption) (*seqproxyapi.GetHistogramResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHistogram", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.GetHistogramResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistogram indicates an expected call of GetHistogram.
func (mr *MockSeqProxyApiClientMockRecorder) GetHistogram(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistogram", reflect.TypeOf((*MockSeqProxyApiClient)(nil).GetHistogram), varargs...)
}

// Mapping mocks base method.
func (m *MockSeqProxyApiClient) Mapping(ctx context.Context, in *seqproxyapi.MappingRequest, opts ...grpc.CallOption) (*seqproxyapi.MappingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mapping", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.MappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mapping indicates an expected call of Mapping.
func (mr *MockSeqProxyApiClientMockRecorder) Mapping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mapping", reflect.TypeOf((*MockSeqProxyApiClient)(nil).Mapping), varargs...)
}

// Search mocks base method.
func (m *MockSeqProxyApiClient) Search(ctx context.Context, in *seqproxyapi.SearchRequest, opts ...grpc.CallOption) (*seqproxyapi.SearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSeqProxyApiClientMockRecorder) Search(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSeqProxyApiClient)(nil).Search), varargs...)
}

// StartAsyncSearch mocks base method.
func (m *MockSeqProxyApiClient) StartAsyncSearch(ctx context.Context, in *seqproxyapi.StartAsyncSearchRequest, opts ...grpc.CallOption) (*seqproxyapi.StartAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAsyncSearch", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.StartAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAsyncSearch indicates an expected call of StartAsyncSearch.
func (mr *MockSeqProxyApiClientMockRecorder) StartAsyncSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAsyncSearch", reflect.TypeOf((*MockSeqProxyApiClient)(nil).StartAsyncSearch), varargs...)
}

// Status mocks base method.
func (m *MockSeqProxyApiClient) Status(ctx context.Context, in *seqproxyapi.StatusRequest, opts ...grpc.CallOption) (*seqproxyapi.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*seqproxyapi.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockSeqProxyApiClientMockRecorder) Status(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSeqProxyApiClient)(nil).Status), varargs...)
}

// MockSeqProxyApi_FetchClient is a mock of SeqProxyApi_FetchClient interface.
type MockSeqProxyApi_FetchClient struct {
	ctrl     *gomock.Controller
	recorder *MockSeqProxyApi_FetchClientMockRecorder
	isgomock struct{}
}

// MockSeqProxyApi_FetchClientMockRecorder is the mock recorder for MockSeqProxyApi_FetchClient.
type MockSeqProxyApi_FetchClientMockRecorder struct {
	mock *MockSeqProxyApi_FetchClient
}

// NewMockSeqProxyApi_FetchClient creates a new mock instance.
func NewMockSeqProxyApi_FetchClient(ctrl *gomock.Controller) *MockSeqProxyApi_FetchClient {
	mock := &MockSeqProxyApi_FetchClient{ctrl: ctrl}
	mock.recorder = &MockSeqProxyApi_FetchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeqProxyApi_FetchClient) EXPECT() *MockSeqProxyApi_FetchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSeqProxyApi_FetchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSeqProxyApi_FetchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSeqProxyApi_FetchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSeqProxyApi_FetchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSeqProxyApi_FetchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSeqProxyApi_FetchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSeqProxyApi_FetchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSeqProxyApi_FetchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSeqProxyApi_FetchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSeqProxyApi_FetchClient) Recv() (*seqproxyapi.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*seqproxyapi.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSeqProxyApi_FetchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSeqProxyApi_FetchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSeqProxyApi_FetchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSeqProxyApi_FetchClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSeqProxyApi_FetchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSeqProxyApi_FetchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSeqProxyApi_FetchClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSeqProxyApi_FetchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSeqProxyApi_FetchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSeqProxyApi_FetchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSeqProxyApi_FetchClient)(nil).Trailer))
}

// MockSeqProxyApi_ExportClient is a mock of SeqProxyApi_ExportClient interface.
type MockSeqProxyApi_ExportClient struct {
	ctrl     *gomock.Controller
	recorder *MockSeqProxyApi_ExportClientMockRecorder
	isgomock struct{}
}

// MockSeqProxyApi_ExportClientMockRecorder is the mock recorder for MockSeqProxyApi_ExportClient.
type MockSeqProxyApi_ExportClientMockRecorder struct {
	mock *MockSeqProxyApi_ExportClient
}

// NewMockSeqProxyApi_ExportClient creates a new mock instance.
func NewMockSeqProxyApi_ExportClient(ctrl *gomock.Controller) *MockSeqProxyApi_ExportClient {
	mock := &MockSeqProxyApi_ExportClient{ctrl: ctrl}
	mock.recorder = &MockSeqProxyApi_ExportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeqProxyApi_ExportClient) EXPECT() *MockSeqProxyApi_ExportClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSeqProxyApi_ExportClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSeqProxyApi_ExportClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSeqProxyApi_ExportClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSeqProxyApi_ExportClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSeqProxyApi_ExportClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSeqProxyApi_ExportClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSeqProxyApi_ExportClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSeqProxyApi_ExportClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSeqProxyApi_ExportClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSeqProxyApi_ExportClient) Recv() (*seqproxyapi.ExportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*seqproxyapi.ExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSeqProxyApi_ExportClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSeqProxyApi_ExportClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSeqProxyApi_ExportClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSeqProxyApi_ExportClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSeqProxyApi_ExportClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSeqProxyApi_ExportClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSeqProxyApi_ExportClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSeqProxyApi_ExportClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSeqProxyApi_ExportClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSeqProxyApi_ExportClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSeqProxyApi_ExportClient)(nil).Trailer))
}

// MockSeqProxyApiServer is a mock of SeqProxyApiServer interface.
type MockSeqProxyApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockSeqProxyApiServerMockRecorder
	isgomock struct{}
}

// MockSeqProxyApiServerMockRecorder is the mock recorder for MockSeqProxyApiServer.
type MockSeqProxyApiServerMockRecorder struct {
	mock *MockSeqProxyApiServer
}

// NewMockSeqProxyApiServer creates a new mock instance.
func NewMockSeqProxyApiServer(ctrl *gomock.Controller) *MockSeqProxyApiServer {
	mock := &MockSeqProxyApiServer{ctrl: ctrl}
	mock.recorder = &MockSeqProxyApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeqProxyApiServer) EXPECT() *MockSeqProxyApiServerMockRecorder {
	return m.recorder
}

// CancelAsyncSearch mocks base method.
func (m *MockSeqProxyApiServer) CancelAsyncSearch(arg0 context.Context, arg1 *seqproxyapi.CancelAsyncSearchRequest) (*seqproxyapi.CancelAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.CancelAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAsyncSearch indicates an expected call of CancelAsyncSearch.
func (mr *MockSeqProxyApiServerMockRecorder) CancelAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAsyncSearch", reflect.TypeOf((*MockSeqProxyApiServer)(nil).CancelAsyncSearch), arg0, arg1)
}

// ComplexSearch mocks base method.
func (m *MockSeqProxyApiServer) ComplexSearch(arg0 context.Context, arg1 *seqproxyapi.ComplexSearchRequest) (*seqproxyapi.ComplexSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComplexSearch", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.ComplexSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComplexSearch indicates an expected call of ComplexSearch.
func (mr *MockSeqProxyApiServerMockRecorder) ComplexSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplexSearch", reflect.TypeOf((*MockSeqProxyApiServer)(nil).ComplexSearch), arg0, arg1)
}

// DeleteAsyncSearch mocks base method.
func (m *MockSeqProxyApiServer) DeleteAsyncSearch(arg0 context.Context, arg1 *seqproxyapi.DeleteAsyncSearchRequest) (*seqproxyapi.DeleteAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.DeleteAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsyncSearch indicates an expected call of DeleteAsyncSearch.
func (mr *MockSeqProxyApiServerMockRecorder) DeleteAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsyncSearch", reflect.TypeOf((*MockSeqProxyApiServer)(nil).DeleteAsyncSearch), arg0, arg1)
}

// Export mocks base method.
func (m *MockSeqProxyApiServer) Export(arg0 *seqproxyapi.ExportRequest, arg1 seqproxyapi.SeqProxyApi_ExportServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Export indicates an expected call of Export.
func (mr *MockSeqProxyApiServerMockRecorder) Export(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockSeqProxyApiServer)(nil).Export), arg0, arg1)
}

// Fetch mocks base method.
func (m *MockSeqProxyApiServer) Fetch(arg0 *seqproxyapi.FetchRequest, arg1 seqproxyapi.SeqProxyApi_FetchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockSeqProxyApiServerMockRecorder) Fetch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSeqProxyApiServer)(nil).Fetch), arg0, arg1)
}

// FetchAsyncSearchResult mocks base method.
func (m *MockSeqProxyApiServer) FetchAsyncSearchResult(arg0 context.Context, arg1 *seqproxyapi.FetchAsyncSearchResultRequest) (*seqproxyapi.FetchAsyncSearchResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAsyncSearchResult", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.FetchAsyncSearchResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAsyncSearchResult indicates an expected call of FetchAsyncSearchResult.
func (mr *MockSeqProxyApiServerMockRecorder) FetchAsyncSearchResult(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAsyncSearchResult", reflect.TypeOf((*MockSeqProxyApiServer)(nil).FetchAsyncSearchResult), arg0, arg1)
}

// GetAggregation mocks base method.
func (m *MockSeqProxyApiServer) GetAggregation(arg0 context.Context, arg1 *seqproxyapi.GetAggregationRequest) (*seqproxyapi.GetAggregationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregation", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.GetAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregation indicates an expected call of GetAggregation.
func (mr *MockSeqProxyApiServerMockRecorder) GetAggregation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregation", reflect.TypeOf((*MockSeqProxyApiServer)(nil).GetAggregation), arg0, arg1)
}

// GetAsyncSearchesList mocks base method.
func (m *MockSeqProxyApiServer) GetAsyncSearchesList(arg0 context.Context, arg1 *seqproxyapi.GetAsyncSearchesListRequest) (*seqproxyapi.GetAsyncSearchesListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncSearchesList", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.GetAsyncSearchesListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncSearchesList indicates an expected call of GetAsyncSearchesList.
func (mr *MockSeqProxyApiServerMockRecorder) GetAsyncSearchesList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncSearchesList", reflect.TypeOf((*MockSeqProxyApiServer)(nil).GetAsyncSearchesList), arg0, arg1)
}

// GetHistogram mocks base method.
func (m *MockSeqProxyApiServer) GetHistogram(arg0 context.Context, arg1 *seqproxyapi.GetHistogramRequest) (*seqproxyapi.GetHistogramResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistogram", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.GetHistogramResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistogram indicates an expected call of GetHistogram.
func (mr *MockSeqProxyApiServerMockRecorder) GetHistogram(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistogram", reflect.TypeOf((*MockSeqProxyApiServer)(nil).GetHistogram), arg0, arg1)
}

// Mapping mocks base method.
func (m *MockSeqProxyApiServer) Mapping(arg0 context.Context, arg1 *seqproxyapi.MappingRequest) (*seqproxyapi.MappingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mapping", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.MappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mapping indicates an expected call of Mapping.
func (mr *MockSeqProxyApiServerMockRecorder) Mapping(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mapping", reflect.TypeOf((*MockSeqProxyApiServer)(nil).Mapping), arg0, arg1)
}

// Search mocks base method.
func (m *MockSeqProxyApiServer) Search(arg0 context.Context, arg1 *seqproxyapi.SearchRequest) (*seqproxyapi.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSeqProxyApiServerMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSeqProxyApiServer)(nil).Search), arg0, arg1)
}

// StartAsyncSearch mocks base method.
func (m *MockSeqProxyApiServer) StartAsyncSearch(arg0 context.Context, arg1 *seqproxyapi.StartAsyncSearchRequest) (*seqproxyapi.StartAsyncSearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.StartAsyncSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAsyncSearch indicates an expected call of StartAsyncSearch.
func (mr *MockSeqProxyApiServerMockRecorder) StartAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAsyncSearch", reflect.TypeOf((*MockSeqProxyApiServer)(nil).StartAsyncSearch), arg0, arg1)
}

// Status mocks base method.
func (m *MockSeqProxyApiServer) Status(arg0 context.Context, arg1 *seqproxyapi.StatusRequest) (*seqproxyapi.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*seqproxyapi.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockSeqProxyApiServerMockRecorder) Status(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSeqProxyApiServer)(nil).Status), arg0, arg1)
}

// MockUnsafeSeqProxyApiServer is a mock of UnsafeSeqProxyApiServer interface.
type MockUnsafeSeqProxyApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSeqProxyApiServerMockRecorder
	isgomock struct{}
}

// MockUnsafeSeqProxyApiServerMockRecorder is the mock recorder for MockUnsafeSeqProxyApiServer.
type MockUnsafeSeqProxyApiServerMockRecorder struct {
	mock *MockUnsafeSeqProxyApiServer
}

// NewMockUnsafeSeqProxyApiServer creates a new mock instance.
func NewMockUnsafeSeqProxyApiServer(ctrl *gomock.Controller) *MockUnsafeSeqProxyApiServer {
	mock := &MockUnsafeSeqProxyApiServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSeqProxyApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSeqProxyApiServer) EXPECT() *MockUnsafeSeqProxyApiServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSeqProxyApiServer mocks base method.
func (m *MockUnsafeSeqProxyApiServer) mustEmbedUnimplementedSeqProxyApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSeqProxyApiServer")
}

// mustEmbedUnimplementedSeqProxyApiServer indicates an expected call of mustEmbedUnimplementedSeqProxyApiServer.
func (mr *MockUnsafeSeqProxyApiServerMockRecorder) mustEmbedUnimplementedSeqProxyApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSeqProxyApiServer", reflect.TypeOf((*MockUnsafeSeqProxyApiServer)(nil).mustEmbedUnimplementedSeqProxyApiServer))
}

// MockSeqProxyApi_FetchServer is a mock of SeqProxyApi_FetchServer interface.
type MockSeqProxyApi_FetchServer struct {
	ctrl     *gomock.Controller
	recorder *MockSeqProxyApi_FetchServerMockRecorder
	isgomock struct{}
}

// MockSeqProxyApi_FetchServerMockRecorder is the mock recorder for MockSeqProxyApi_FetchServer.
type MockSeqProxyApi_FetchServerMockRecorder struct {
	mock *MockSeqProxyApi_FetchServer
}

// NewMockSeqProxyApi_FetchServer creates a new mock instance.
func NewMockSeqProxyApi_FetchServer(ctrl *gomock.Controller) *MockSeqProxyApi_FetchServer {
	mock := &MockSeqProxyApi_FetchServer{ctrl: ctrl}
	mock.recorder = &MockSeqProxyApi_FetchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeqProxyApi_FetchServer) EXPECT() *MockSeqProxyApi_FetchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSeqProxyApi_FetchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSeqProxyApi_FetchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSeqProxyApi_FetchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSeqProxyApi_FetchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSeqProxyApi_FetchServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSeqProxyApi_FetchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSeqProxyApi_FetchServer) Send(arg0 *seqproxyapi.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSeqProxyApi_FetchServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSeqProxyApi_FetchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSeqProxyApi_FetchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSeqProxyApi_FetchServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSeqProxyApi_FetchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSeqProxyApi_FetchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSeqProxyApi_FetchServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSeqProxyApi_FetchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSeqProxyApi_FetchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSeqProxyApi_FetchServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSeqProxyApi_FetchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSeqProxyApi_FetchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSeqProxyApi_FetchServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSeqProxyApi_FetchServer)(nil).SetTrailer), arg0)
}

// MockSeqProxyApi_ExportServer is a mock of SeqProxyApi_ExportServer interface.
type MockSeqProxyApi_ExportServer struct {
	ctrl     *gomock.Controller
	recorder *MockSeqProxyApi_ExportServerMockRecorder
	isgomock struct{}
}

// MockSeqProxyApi_ExportServerMockRecorder is the mock recorder for MockSeqProxyApi_ExportServer.
type MockSeqProxyApi_ExportServerMockRecorder struct {
	mock *MockSeqProxyApi_ExportServer
}

// NewMockSeqProxyApi_ExportServer creates a new mock instance.
func NewMockSeqProxyApi_ExportServer(ctrl *gomock.Controller) *MockSeqProxyApi_ExportServer {
	mock := &MockSeqProxyApi_ExportServer{ctrl: ctrl}
	mock.recorder = &MockSeqProxyApi_ExportServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeqProxyApi_ExportServer) EXPECT() *MockSeqProxyApi_ExportServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSeqProxyApi_ExportServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSeqProxyApi_ExportServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSeqProxyApi_ExportServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSeqProxyApi_ExportServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSeqProxyApi_ExportServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSeqProxyApi_ExportServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSeqProxyApi_ExportServer) Send(arg0 *seqproxyapi.ExportResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSeqProxyApi_ExportServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSeqProxyApi_ExportServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSeqProxyApi_ExportServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSeqProxyApi_ExportServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSeqProxyApi_ExportServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSeqProxyApi_ExportServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSeqProxyApi_ExportServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSeqProxyApi_ExportServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSeqProxyApi_ExportServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSeqProxyApi_ExportServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSeqProxyApi_ExportServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSeqProxyApi_ExportServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSeqProxyApi_ExportServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSeqProxyApi_ExportServer)(nil).SetTrailer), arg0)
}
