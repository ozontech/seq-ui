// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/repository/repository.go -destination=internal/pkg/repository/mock/repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	types "github.com/ozontech/seq-ui/internal/app/types"
	gomock "go.uber.org/mock/gomock"
)

// MockUserProfiles is a mock of UserProfiles interface.
type MockUserProfiles struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfilesMockRecorder
	isgomock struct{}
}

// MockUserProfilesMockRecorder is the mock recorder for MockUserProfiles.
type MockUserProfilesMockRecorder struct {
	mock *MockUserProfiles
}

// NewMockUserProfiles creates a new mock instance.
func NewMockUserProfiles(ctrl *gomock.Controller) *MockUserProfiles {
	mock := &MockUserProfiles{ctrl: ctrl}
	mock.recorder = &MockUserProfilesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfiles) EXPECT() *MockUserProfilesMockRecorder {
	return m.recorder
}

// GetOrCreate mocks base method.
func (m *MockUserProfiles) GetOrCreate(arg0 context.Context, arg1 types.GetOrCreateUserProfileRequest) (types.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", arg0, arg1)
	ret0, _ := ret[0].(types.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockUserProfilesMockRecorder) GetOrCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockUserProfiles)(nil).GetOrCreate), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserProfiles) Update(arg0 context.Context, arg1 types.UpdateUserProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserProfilesMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserProfiles)(nil).Update), arg0, arg1)
}

// MockFavoriteQueries is a mock of FavoriteQueries interface.
type MockFavoriteQueries struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteQueriesMockRecorder
	isgomock struct{}
}

// MockFavoriteQueriesMockRecorder is the mock recorder for MockFavoriteQueries.
type MockFavoriteQueriesMockRecorder struct {
	mock *MockFavoriteQueries
}

// NewMockFavoriteQueries creates a new mock instance.
func NewMockFavoriteQueries(ctrl *gomock.Controller) *MockFavoriteQueries {
	mock := &MockFavoriteQueries{ctrl: ctrl}
	mock.recorder = &MockFavoriteQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoriteQueries) EXPECT() *MockFavoriteQueriesMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFavoriteQueries) Delete(arg0 context.Context, arg1 types.DeleteFavoriteQueryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFavoriteQueriesMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFavoriteQueries)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockFavoriteQueries) GetAll(arg0 context.Context, arg1 types.GetFavoriteQueriesRequest) (types.FavoriteQueries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(types.FavoriteQueries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFavoriteQueriesMockRecorder) GetAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFavoriteQueries)(nil).GetAll), arg0, arg1)
}

// GetOrCreate mocks base method.
func (m *MockFavoriteQueries) GetOrCreate(arg0 context.Context, arg1 types.GetOrCreateFavoriteQueryRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockFavoriteQueriesMockRecorder) GetOrCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockFavoriteQueries)(nil).GetOrCreate), arg0, arg1)
}

// MockDashboards is a mock of Dashboards interface.
type MockDashboards struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardsMockRecorder
	isgomock struct{}
}

// MockDashboardsMockRecorder is the mock recorder for MockDashboards.
type MockDashboardsMockRecorder struct {
	mock *MockDashboards
}

// NewMockDashboards creates a new mock instance.
func NewMockDashboards(ctrl *gomock.Controller) *MockDashboards {
	mock := &MockDashboards{ctrl: ctrl}
	mock.recorder = &MockDashboardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboards) EXPECT() *MockDashboardsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDashboards) Create(arg0 context.Context, arg1 types.CreateDashboardRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDashboardsMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDashboards)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockDashboards) Delete(arg0 context.Context, arg1 types.DeleteDashboardRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDashboardsMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDashboards)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockDashboards) GetAll(arg0 context.Context, arg1 types.GetAllDashboardsRequest) (types.DashboardInfosWithOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(types.DashboardInfosWithOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDashboardsMockRecorder) GetAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDashboards)(nil).GetAll), arg0, arg1)
}

// GetByUUID mocks base method.
func (m *MockDashboards) GetByUUID(arg0 context.Context, arg1 string) (types.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", arg0, arg1)
	ret0, _ := ret[0].(types.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockDashboardsMockRecorder) GetByUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockDashboards)(nil).GetByUUID), arg0, arg1)
}

// GetMy mocks base method.
func (m *MockDashboards) GetMy(arg0 context.Context, arg1 types.GetUserDashboardsRequest) (types.DashboardInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMy", arg0, arg1)
	ret0, _ := ret[0].(types.DashboardInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMy indicates an expected call of GetMy.
func (mr *MockDashboardsMockRecorder) GetMy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMy", reflect.TypeOf((*MockDashboards)(nil).GetMy), arg0, arg1)
}

// Search mocks base method.
func (m *MockDashboards) Search(arg0 context.Context, arg1 types.SearchDashboardsRequest) (types.DashboardInfosWithOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(types.DashboardInfosWithOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDashboardsMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDashboards)(nil).Search), arg0, arg1)
}

// Update mocks base method.
func (m *MockDashboards) Update(arg0 context.Context, arg1 types.UpdateDashboardRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDashboardsMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDashboards)(nil).Update), arg0, arg1)
}

// MockAsyncSearches is a mock of AsyncSearches interface.
type MockAsyncSearches struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncSearchesMockRecorder
	isgomock struct{}
}

// MockAsyncSearchesMockRecorder is the mock recorder for MockAsyncSearches.
type MockAsyncSearchesMockRecorder struct {
	mock *MockAsyncSearches
}

// NewMockAsyncSearches creates a new mock instance.
func NewMockAsyncSearches(ctrl *gomock.Controller) *MockAsyncSearches {
	mock := &MockAsyncSearches{ctrl: ctrl}
	mock.recorder = &MockAsyncSearchesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncSearches) EXPECT() *MockAsyncSearchesMockRecorder {
	return m.recorder
}

// DeleteAsyncSearch mocks base method.
func (m *MockAsyncSearches) DeleteAsyncSearch(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAsyncSearch indicates an expected call of DeleteAsyncSearch.
func (mr *MockAsyncSearchesMockRecorder) DeleteAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsyncSearch", reflect.TypeOf((*MockAsyncSearches)(nil).DeleteAsyncSearch), arg0, arg1)
}

// DeleteExpiredAsyncSearches mocks base method.
func (m *MockAsyncSearches) DeleteExpiredAsyncSearches(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredAsyncSearches", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredAsyncSearches indicates an expected call of DeleteExpiredAsyncSearches.
func (mr *MockAsyncSearchesMockRecorder) DeleteExpiredAsyncSearches(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredAsyncSearches", reflect.TypeOf((*MockAsyncSearches)(nil).DeleteExpiredAsyncSearches), arg0)
}

// GetAsyncSearchById mocks base method.
func (m *MockAsyncSearches) GetAsyncSearchById(arg0 context.Context, arg1 string) (types.AsyncSearchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncSearchById", arg0, arg1)
	ret0, _ := ret[0].(types.AsyncSearchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncSearchById indicates an expected call of GetAsyncSearchById.
func (mr *MockAsyncSearchesMockRecorder) GetAsyncSearchById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncSearchById", reflect.TypeOf((*MockAsyncSearches)(nil).GetAsyncSearchById), arg0, arg1)
}

// GetAsyncSearchesList mocks base method.
func (m *MockAsyncSearches) GetAsyncSearchesList(arg0 context.Context, arg1 types.GetAsyncSearchesListRequest) ([]types.AsyncSearchInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncSearchesList", arg0, arg1)
	ret0, _ := ret[0].([]types.AsyncSearchInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncSearchesList indicates an expected call of GetAsyncSearchesList.
func (mr *MockAsyncSearchesMockRecorder) GetAsyncSearchesList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncSearchesList", reflect.TypeOf((*MockAsyncSearches)(nil).GetAsyncSearchesList), arg0, arg1)
}

// SaveAsyncSearch mocks base method.
func (m *MockAsyncSearches) SaveAsyncSearch(arg0 context.Context, arg1 types.SaveAsyncSearchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAsyncSearch indicates an expected call of SaveAsyncSearch.
func (mr *MockAsyncSearchesMockRecorder) SaveAsyncSearch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAsyncSearch", reflect.TypeOf((*MockAsyncSearches)(nil).SaveAsyncSearch), arg0, arg1)
}
