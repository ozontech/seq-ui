// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/repository_ch/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/repository_ch/repository.go -destination=internal/pkg/repository_ch/mock/repository.go
//

// Package mock_repositorych is a generated GoMock package.
package mock_repositorych

import (
	context "context"
	reflect "reflect"

	types "github.com/ozontech/seq-ui/internal/app/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetErrorCounts mocks base method.
func (m *MockRepository) GetErrorCounts(arg0 context.Context, arg1 types.GetErrorGroupDetailsRequest) (types.ErrorGroupCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorCounts", arg0, arg1)
	ret0, _ := ret[0].(types.ErrorGroupCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorCounts indicates an expected call of GetErrorCounts.
func (mr *MockRepositoryMockRecorder) GetErrorCounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorCounts", reflect.TypeOf((*MockRepository)(nil).GetErrorCounts), arg0, arg1)
}

// GetErrorDetails mocks base method.
func (m *MockRepository) GetErrorDetails(arg0 context.Context, arg1 types.GetErrorGroupDetailsRequest) (types.ErrorGroupDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorDetails", arg0, arg1)
	ret0, _ := ret[0].(types.ErrorGroupDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorDetails indicates an expected call of GetErrorDetails.
func (mr *MockRepositoryMockRecorder) GetErrorDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorDetails", reflect.TypeOf((*MockRepository)(nil).GetErrorDetails), arg0, arg1)
}

// GetErrorGroups mocks base method.
func (m *MockRepository) GetErrorGroups(arg0 context.Context, arg1 types.GetErrorGroupsRequest) ([]types.ErrorGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorGroups", arg0, arg1)
	ret0, _ := ret[0].([]types.ErrorGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorGroups indicates an expected call of GetErrorGroups.
func (mr *MockRepositoryMockRecorder) GetErrorGroups(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorGroups", reflect.TypeOf((*MockRepository)(nil).GetErrorGroups), arg0, arg1)
}

// GetErrorGroupsCount mocks base method.
func (m *MockRepository) GetErrorGroupsCount(arg0 context.Context, arg1 types.GetErrorGroupsRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorGroupsCount", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorGroupsCount indicates an expected call of GetErrorGroupsCount.
func (mr *MockRepositoryMockRecorder) GetErrorGroupsCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorGroupsCount", reflect.TypeOf((*MockRepository)(nil).GetErrorGroupsCount), arg0, arg1)
}

// GetErrorHist mocks base method.
func (m *MockRepository) GetErrorHist(arg0 context.Context, arg1 types.GetErrorHistRequest) ([]types.ErrorHistBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorHist", arg0, arg1)
	ret0, _ := ret[0].([]types.ErrorHistBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorHist indicates an expected call of GetErrorHist.
func (mr *MockRepositoryMockRecorder) GetErrorHist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorHist", reflect.TypeOf((*MockRepository)(nil).GetErrorHist), arg0, arg1)
}

// GetErrorReleases mocks base method.
func (m *MockRepository) GetErrorReleases(arg0 context.Context, arg1 types.GetErrorGroupReleasesRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorReleases", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorReleases indicates an expected call of GetErrorReleases.
func (mr *MockRepositoryMockRecorder) GetErrorReleases(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorReleases", reflect.TypeOf((*MockRepository)(nil).GetErrorReleases), arg0, arg1)
}

// GetServices mocks base method.
func (m *MockRepository) GetServices(arg0 context.Context, arg1 types.GetServicesRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockRepositoryMockRecorder) GetServices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockRepository)(nil).GetServices), arg0, arg1)
}
