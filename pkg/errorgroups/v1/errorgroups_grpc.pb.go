// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: errorgroups/v1/errorgroups.proto

package errorgroups

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ErrorGroupsService_GetGroups_FullMethodName   = "/errorgroups.v1.ErrorGroupsService/GetGroups"
	ErrorGroupsService_GetHist_FullMethodName     = "/errorgroups.v1.ErrorGroupsService/GetHist"
	ErrorGroupsService_GetDetails_FullMethodName  = "/errorgroups.v1.ErrorGroupsService/GetDetails"
	ErrorGroupsService_GetReleases_FullMethodName = "/errorgroups.v1.ErrorGroupsService/GetReleases"
	ErrorGroupsService_GetServices_FullMethodName = "/errorgroups.v1.ErrorGroupsService/GetServices"
)

// ErrorGroupsServiceClient is the client API for ErrorGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorGroupsServiceClient interface {
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	GetHist(ctx context.Context, in *GetHistRequest, opts ...grpc.CallOption) (*GetHistResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
	GetReleases(ctx context.Context, in *GetReleasesRequest, opts ...grpc.CallOption) (*GetReleasesResponse, error)
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
}

type errorGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorGroupsServiceClient(cc grpc.ClientConnInterface) ErrorGroupsServiceClient {
	return &errorGroupsServiceClient{cc}
}

func (c *errorGroupsServiceClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, ErrorGroupsService_GetGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorGroupsServiceClient) GetHist(ctx context.Context, in *GetHistRequest, opts ...grpc.CallOption) (*GetHistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistResponse)
	err := c.cc.Invoke(ctx, ErrorGroupsService_GetHist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorGroupsServiceClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, ErrorGroupsService_GetDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorGroupsServiceClient) GetReleases(ctx context.Context, in *GetReleasesRequest, opts ...grpc.CallOption) (*GetReleasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReleasesResponse)
	err := c.cc.Invoke(ctx, ErrorGroupsService_GetReleases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorGroupsServiceClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, ErrorGroupsService_GetServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorGroupsServiceServer is the server API for ErrorGroupsService service.
// All implementations should embed UnimplementedErrorGroupsServiceServer
// for forward compatibility
type ErrorGroupsServiceServer interface {
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error)
	GetHist(context.Context, *GetHistRequest) (*GetHistResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	GetReleases(context.Context, *GetReleasesRequest) (*GetReleasesResponse, error)
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
}

// UnimplementedErrorGroupsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedErrorGroupsServiceServer struct {
}

func (UnimplementedErrorGroupsServiceServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedErrorGroupsServiceServer) GetHist(context.Context, *GetHistRequest) (*GetHistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHist not implemented")
}
func (UnimplementedErrorGroupsServiceServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedErrorGroupsServiceServer) GetReleases(context.Context, *GetReleasesRequest) (*GetReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleases not implemented")
}
func (UnimplementedErrorGroupsServiceServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}

// UnsafeErrorGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorGroupsServiceServer will
// result in compilation errors.
type UnsafeErrorGroupsServiceServer interface {
	mustEmbedUnimplementedErrorGroupsServiceServer()
}

func RegisterErrorGroupsServiceServer(s grpc.ServiceRegistrar, srv ErrorGroupsServiceServer) {
	s.RegisterService(&ErrorGroupsService_ServiceDesc, srv)
}

func _ErrorGroupsService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorGroupsServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorGroupsService_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorGroupsServiceServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorGroupsService_GetHist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorGroupsServiceServer).GetHist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorGroupsService_GetHist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorGroupsServiceServer).GetHist(ctx, req.(*GetHistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorGroupsService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorGroupsServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorGroupsService_GetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorGroupsServiceServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorGroupsService_GetReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorGroupsServiceServer).GetReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorGroupsService_GetReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorGroupsServiceServer).GetReleases(ctx, req.(*GetReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorGroupsService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorGroupsServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorGroupsService_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorGroupsServiceServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorGroupsService_ServiceDesc is the grpc.ServiceDesc for ErrorGroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorGroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "errorgroups.v1.ErrorGroupsService",
	HandlerType: (*ErrorGroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroups",
			Handler:    _ErrorGroupsService_GetGroups_Handler,
		},
		{
			MethodName: "GetHist",
			Handler:    _ErrorGroupsService_GetHist_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _ErrorGroupsService_GetDetails_Handler,
		},
		{
			MethodName: "GetReleases",
			Handler:    _ErrorGroupsService_GetReleases_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ErrorGroupsService_GetServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errorgroups/v1/errorgroups.proto",
}
