// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: seqapi/v1/seq_api.proto

package seqapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SeqAPIService_Search_FullMethodName                 = "/seqapi.v1.SeqAPIService/Search"
	SeqAPIService_GetEvent_FullMethodName               = "/seqapi.v1.SeqAPIService/GetEvent"
	SeqAPIService_GetHistogram_FullMethodName           = "/seqapi.v1.SeqAPIService/GetHistogram"
	SeqAPIService_GetAggregation_FullMethodName         = "/seqapi.v1.SeqAPIService/GetAggregation"
	SeqAPIService_GetFields_FullMethodName              = "/seqapi.v1.SeqAPIService/GetFields"
	SeqAPIService_GetPinnedFields_FullMethodName        = "/seqapi.v1.SeqAPIService/GetPinnedFields"
	SeqAPIService_GetLimits_FullMethodName              = "/seqapi.v1.SeqAPIService/GetLimits"
	SeqAPIService_Status_FullMethodName                 = "/seqapi.v1.SeqAPIService/Status"
	SeqAPIService_GetLogsLifespan_FullMethodName        = "/seqapi.v1.SeqAPIService/GetLogsLifespan"
	SeqAPIService_StartAsyncSearch_FullMethodName       = "/seqapi.v1.SeqAPIService/StartAsyncSearch"
	SeqAPIService_FetchAsyncSearchResult_FullMethodName = "/seqapi.v1.SeqAPIService/FetchAsyncSearchResult"
	SeqAPIService_GetAsyncSearchesList_FullMethodName   = "/seqapi.v1.SeqAPIService/GetAsyncSearchesList"
	SeqAPIService_CancelAsyncSearch_FullMethodName      = "/seqapi.v1.SeqAPIService/CancelAsyncSearch"
	SeqAPIService_DeleteAsyncSearch_FullMethodName      = "/seqapi.v1.SeqAPIService/DeleteAsyncSearch"
)

// SeqAPIServiceClient is the client API for SeqAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeqAPIServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	GetHistogram(ctx context.Context, in *GetHistogramRequest, opts ...grpc.CallOption) (*GetHistogramResponse, error)
	GetAggregation(ctx context.Context, in *GetAggregationRequest, opts ...grpc.CallOption) (*GetAggregationResponse, error)
	GetFields(ctx context.Context, in *GetFieldsRequest, opts ...grpc.CallOption) (*GetFieldsResponse, error)
	GetPinnedFields(ctx context.Context, in *GetFieldsRequest, opts ...grpc.CallOption) (*GetFieldsResponse, error)
	GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetLogsLifespan(ctx context.Context, in *GetLogsLifespanRequest, opts ...grpc.CallOption) (*GetLogsLifespanResponse, error)
	StartAsyncSearch(ctx context.Context, in *StartAsyncSearchRequest, opts ...grpc.CallOption) (*StartAsyncSearchResponse, error)
	FetchAsyncSearchResult(ctx context.Context, in *FetchAsyncSearchResultRequest, opts ...grpc.CallOption) (*FetchAsyncSearchResultResponse, error)
	GetAsyncSearchesList(ctx context.Context, in *GetAsyncSearchesListRequest, opts ...grpc.CallOption) (*GetAsyncSearchesListResponse, error)
	CancelAsyncSearch(ctx context.Context, in *CancelAsyncSearchRequest, opts ...grpc.CallOption) (*CancelAsyncSearchResponse, error)
	DeleteAsyncSearch(ctx context.Context, in *DeleteAsyncSearchRequest, opts ...grpc.CallOption) (*DeleteAsyncSearchResponse, error)
}

type seqAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeqAPIServiceClient(cc grpc.ClientConnInterface) SeqAPIServiceClient {
	return &seqAPIServiceClient{cc}
}

func (c *seqAPIServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetHistogram(ctx context.Context, in *GetHistogramRequest, opts ...grpc.CallOption) (*GetHistogramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistogramResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetHistogram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetAggregation(ctx context.Context, in *GetAggregationRequest, opts ...grpc.CallOption) (*GetAggregationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregationResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetAggregation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetFields(ctx context.Context, in *GetFieldsRequest, opts ...grpc.CallOption) (*GetFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFieldsResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetPinnedFields(ctx context.Context, in *GetFieldsRequest, opts ...grpc.CallOption) (*GetFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFieldsResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetPinnedFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLimitsResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetLogsLifespan(ctx context.Context, in *GetLogsLifespanRequest, opts ...grpc.CallOption) (*GetLogsLifespanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsLifespanResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetLogsLifespan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) StartAsyncSearch(ctx context.Context, in *StartAsyncSearchRequest, opts ...grpc.CallOption) (*StartAsyncSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartAsyncSearchResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_StartAsyncSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) FetchAsyncSearchResult(ctx context.Context, in *FetchAsyncSearchResultRequest, opts ...grpc.CallOption) (*FetchAsyncSearchResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchAsyncSearchResultResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_FetchAsyncSearchResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) GetAsyncSearchesList(ctx context.Context, in *GetAsyncSearchesListRequest, opts ...grpc.CallOption) (*GetAsyncSearchesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAsyncSearchesListResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_GetAsyncSearchesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) CancelAsyncSearch(ctx context.Context, in *CancelAsyncSearchRequest, opts ...grpc.CallOption) (*CancelAsyncSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelAsyncSearchResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_CancelAsyncSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seqAPIServiceClient) DeleteAsyncSearch(ctx context.Context, in *DeleteAsyncSearchRequest, opts ...grpc.CallOption) (*DeleteAsyncSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAsyncSearchResponse)
	err := c.cc.Invoke(ctx, SeqAPIService_DeleteAsyncSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeqAPIServiceServer is the server API for SeqAPIService service.
// All implementations should embed UnimplementedSeqAPIServiceServer
// for forward compatibility
type SeqAPIServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	GetHistogram(context.Context, *GetHistogramRequest) (*GetHistogramResponse, error)
	GetAggregation(context.Context, *GetAggregationRequest) (*GetAggregationResponse, error)
	GetFields(context.Context, *GetFieldsRequest) (*GetFieldsResponse, error)
	GetPinnedFields(context.Context, *GetFieldsRequest) (*GetFieldsResponse, error)
	GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	GetLogsLifespan(context.Context, *GetLogsLifespanRequest) (*GetLogsLifespanResponse, error)
	StartAsyncSearch(context.Context, *StartAsyncSearchRequest) (*StartAsyncSearchResponse, error)
	FetchAsyncSearchResult(context.Context, *FetchAsyncSearchResultRequest) (*FetchAsyncSearchResultResponse, error)
	GetAsyncSearchesList(context.Context, *GetAsyncSearchesListRequest) (*GetAsyncSearchesListResponse, error)
	CancelAsyncSearch(context.Context, *CancelAsyncSearchRequest) (*CancelAsyncSearchResponse, error)
	DeleteAsyncSearch(context.Context, *DeleteAsyncSearchRequest) (*DeleteAsyncSearchResponse, error)
}

// UnimplementedSeqAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSeqAPIServiceServer struct {
}

func (UnimplementedSeqAPIServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetHistogram(context.Context, *GetHistogramRequest) (*GetHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistogram not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetAggregation(context.Context, *GetAggregationRequest) (*GetAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregation not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetFields(context.Context, *GetFieldsRequest) (*GetFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFields not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetPinnedFields(context.Context, *GetFieldsRequest) (*GetFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedFields not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimits not implemented")
}
func (UnimplementedSeqAPIServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetLogsLifespan(context.Context, *GetLogsLifespanRequest) (*GetLogsLifespanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogsLifespan not implemented")
}
func (UnimplementedSeqAPIServiceServer) StartAsyncSearch(context.Context, *StartAsyncSearchRequest) (*StartAsyncSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAsyncSearch not implemented")
}
func (UnimplementedSeqAPIServiceServer) FetchAsyncSearchResult(context.Context, *FetchAsyncSearchResultRequest) (*FetchAsyncSearchResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAsyncSearchResult not implemented")
}
func (UnimplementedSeqAPIServiceServer) GetAsyncSearchesList(context.Context, *GetAsyncSearchesListRequest) (*GetAsyncSearchesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsyncSearchesList not implemented")
}
func (UnimplementedSeqAPIServiceServer) CancelAsyncSearch(context.Context, *CancelAsyncSearchRequest) (*CancelAsyncSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAsyncSearch not implemented")
}
func (UnimplementedSeqAPIServiceServer) DeleteAsyncSearch(context.Context, *DeleteAsyncSearchRequest) (*DeleteAsyncSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsyncSearch not implemented")
}

// UnsafeSeqAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeqAPIServiceServer will
// result in compilation errors.
type UnsafeSeqAPIServiceServer interface {
	mustEmbedUnimplementedSeqAPIServiceServer()
}

func RegisterSeqAPIServiceServer(s grpc.ServiceRegistrar, srv SeqAPIServiceServer) {
	s.RegisterService(&SeqAPIService_ServiceDesc, srv)
}

func _SeqAPIService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetHistogram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetHistogram(ctx, req.(*GetHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetAggregation(ctx, req.(*GetAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetFields(ctx, req.(*GetFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetPinnedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetPinnedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetPinnedFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetPinnedFields(ctx, req.(*GetFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetLimits(ctx, req.(*GetLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetLogsLifespan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsLifespanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetLogsLifespan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetLogsLifespan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetLogsLifespan(ctx, req.(*GetLogsLifespanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_StartAsyncSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAsyncSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).StartAsyncSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_StartAsyncSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).StartAsyncSearch(ctx, req.(*StartAsyncSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_FetchAsyncSearchResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAsyncSearchResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).FetchAsyncSearchResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_FetchAsyncSearchResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).FetchAsyncSearchResult(ctx, req.(*FetchAsyncSearchResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_GetAsyncSearchesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAsyncSearchesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).GetAsyncSearchesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_GetAsyncSearchesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).GetAsyncSearchesList(ctx, req.(*GetAsyncSearchesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_CancelAsyncSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAsyncSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).CancelAsyncSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_CancelAsyncSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).CancelAsyncSearch(ctx, req.(*CancelAsyncSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeqAPIService_DeleteAsyncSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAsyncSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqAPIServiceServer).DeleteAsyncSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeqAPIService_DeleteAsyncSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqAPIServiceServer).DeleteAsyncSearch(ctx, req.(*DeleteAsyncSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeqAPIService_ServiceDesc is the grpc.ServiceDesc for SeqAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeqAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seqapi.v1.SeqAPIService",
	HandlerType: (*SeqAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SeqAPIService_Search_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _SeqAPIService_GetEvent_Handler,
		},
		{
			MethodName: "GetHistogram",
			Handler:    _SeqAPIService_GetHistogram_Handler,
		},
		{
			MethodName: "GetAggregation",
			Handler:    _SeqAPIService_GetAggregation_Handler,
		},
		{
			MethodName: "GetFields",
			Handler:    _SeqAPIService_GetFields_Handler,
		},
		{
			MethodName: "GetPinnedFields",
			Handler:    _SeqAPIService_GetPinnedFields_Handler,
		},
		{
			MethodName: "GetLimits",
			Handler:    _SeqAPIService_GetLimits_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SeqAPIService_Status_Handler,
		},
		{
			MethodName: "GetLogsLifespan",
			Handler:    _SeqAPIService_GetLogsLifespan_Handler,
		},
		{
			MethodName: "StartAsyncSearch",
			Handler:    _SeqAPIService_StartAsyncSearch_Handler,
		},
		{
			MethodName: "FetchAsyncSearchResult",
			Handler:    _SeqAPIService_FetchAsyncSearchResult_Handler,
		},
		{
			MethodName: "GetAsyncSearchesList",
			Handler:    _SeqAPIService_GetAsyncSearchesList_Handler,
		},
		{
			MethodName: "CancelAsyncSearch",
			Handler:    _SeqAPIService_CancelAsyncSearch_Handler,
		},
		{
			MethodName: "DeleteAsyncSearch",
			Handler:    _SeqAPIService_DeleteAsyncSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seqapi/v1/seq_api.proto",
}
